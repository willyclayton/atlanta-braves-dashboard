name: Daily Rundown

on:
  schedule:
    # Runs at 4:00 AM EST (9:00 AM UTC)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  generate-daily-rundown:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install axios
    
    - name: Generate Daily Rundown
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        node << 'EOF'
        const axios = require('axios');
        const fs = require('fs');
        
        async function generateDailyRundown() {
          try {
            console.log('Fetching recent Braves game data...');
            
            // Fetch recent Braves games from MLB API
            const mlbResponse = await axios.get(
              'https://statsapi.mlb.com/api/v1/schedule/games/?sportId=1&teamId=144&season=2025&gameType=R&hydrate=boxscore,decisions',
              { timeout: 10000 }
            );
            
            const games = mlbResponse.data.dates.flatMap(date => date.games);
            const recentGames = games
              .filter(game => game.status.statusCode === 'F') // Only completed games
              .sort((a, b) => new Date(b.gameDate) - new Date(a.gameDate))
              .slice(0, 1); // Get last game only
            
            if (recentGames.length === 0) {
              throw new Error('No recent completed games found');
            }
            
            const lastGame = recentGames[0];
            console.log('Fetching detailed boxscore for game:', lastGame.gamePk);
            
            // Get detailed boxscore data with specific hydration
            const boxscoreResponse = await axios.get(
              `https://statsapi.mlb.com/api/v1/game/${lastGame.gamePk}/boxscore`,
              { timeout: 15000 }
            );
            
            // Also get game summary for more accurate data
            const gameResponse = await axios.get(
              `https://statsapi.mlb.com/api/v1/game/${lastGame.gamePk}/linescore`,
              { timeout: 15000 }
            );
            
            const boxscore = boxscoreResponse.data;
            const gameData = gameResponse.data;
            
            // Determine Braves team and opponent from the boxscore
            const isAway = boxscore.teams.away.team.id === 144;
            const bravesTeam = isAway ? boxscore.teams.away : boxscore.teams.home;
            const opponentTeam = isAway ? boxscore.teams.home : boxscore.teams.away;
            
            // Get accurate game result
            const bravesRuns = bravesTeam.teamStats.batting.runs;
            const oppRuns = opponentTeam.teamStats.batting.runs;
            const gameResult = bravesRuns > oppRuns ? 'W' : 'L';
            const score = `${bravesRuns}-${oppRuns}`;
            const homeAway = isAway ? '@' : 'vs';
            
            // Extract pitcher decisions more accurately from game decisions
            const decisions = gameData.decisions || {};
            const winnerInfo = decisions.winner ? `${decisions.winner.fullName}` : null;
            const loserInfo = decisions.loser ? `${decisions.loser.fullName}` : null;
            const saveInfo = decisions.save ? `${decisions.save.fullName}` : null;
            
            // Find Braves' best offensive performer
            let topBravesHitter = null;
            let bestOffensiveValue = 0;
            
            Object.values(bravesTeam.players).forEach(player => {
              if (player.stats?.batting) {
                const hits = player.stats.batting.hits || 0;
                const rbi = player.stats.batting.rbi || 0;
                const runs = player.stats.batting.runs || 0;
                // Weighted score: hits + (2 * RBI) + runs
                const offensiveValue = hits + (rbi * 2) + runs;
                
                if (offensiveValue > bestOffensiveValue && hits > 0) {
                  bestOffensiveValue = offensiveValue;
                  topBravesHitter = player;
                }
              }
            });
            
            // Build accurate, concise game data for AI
            const gameContext = JSON.stringify({
              gameResult: `Atlanta Braves ${gameResult} ${score} ${homeAway} ${opponentTeam.team.name}`,
              date: new Date(lastGame.gameDate).toLocaleDateString(),
              pitchingDecisions: {
                winner: winnerInfo,
                loser: loserInfo,
                save: saveInfo
              },
              bravesOffense: {
                runs: bravesRuns,
                hits: bravesTeam.teamStats.batting.hits,
                errors: bravesTeam.teamStats.fielding.errors,
                topPerformer: topBravesHitter ? {
                  name: topBravesHitter.person.fullName,
                  hits: topBravesHitter.stats.batting.hits,
                  rbi: topBravesHitter.stats.batting.rbi,
                  runs: topBravesHitter.stats.batting.runs
                } : null
              },
              opponentStats: {
                team: opponentTeam.team.name,
                runs: oppRuns,
                hits: opponentTeam.teamStats.batting.hits,
                errors: opponentTeam.teamStats.fielding.errors
              }
            }, null, 2);
            
            console.log('Calling OpenAI API for concise summary...');
            
            // Call OpenAI API with GPT-4 for better accuracy
            const openaiResponse = await axios.post(
              'https://api.openai.com/v1/chat/completions',
              {
                model: 'gpt-4o-mini',
                messages: [
                  {
                    role: 'system',
                    content: 'You are a precise sports reporter. Write extremely concise game summaries using ONLY the provided data. Format: "Braves [W/L] [score] [vs/@] [opponent]. [Winner] earned the win[, Loser took the loss][, Save recorded save]. [Top hitter] led with [stats]. [Notable detail if any]." Maximum 2-3 sentences. Use exact names and numbers from the data provided.'
                  },
                  {
                    role: 'user',
                    content: `Write a concise game summary using only this verified boxscore data. Do not add information not provided:\n\n${gameContext}`
                  }
                ],
                max_tokens: 120,
                temperature: 0.1
              },
              {
                headers: {
                  'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                  'Content-Type': 'application/json'
                },
                timeout: 30000
              }
            );
            
            const rundownText = openaiResponse.data.choices[0].message.content.trim();
            
            // Create data directory if it doesn't exist
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            // Save the daily rundown with accurate data
            const dailyData = {
              date: new Date().toISOString().split('T')[0],
              timestamp: new Date().toISOString(),
              rundown: rundownText,
              lastGame: {
                date: lastGame.gameDate,
                opponent: opponentTeam.team.name,
                result: gameResult,
                score: score,
                homeAway: homeAway,
                pitching: {
                  winner: winnerInfo,
                  loser: loserInfo,
                  save: saveInfo
                },
                hitting: {
                  bravesHits: bravesTeam.teamStats.batting.hits,
                  bravesRuns: bravesRuns,
                  topHitter: topBravesHitter ? {
                    name: topBravesHitter.person.fullName,
                    hits: topBravesHitter.stats.batting.hits,
                    rbi: topBravesHitter.stats.batting.rbi,
                    runs: topBravesHitter.stats.batting.runs
                  } : null
                }
              }
            };
            
            fs.writeFileSync('data/daily-rundown.json', JSON.stringify(dailyData, null, 2));
            
            console.log('Daily rundown generated successfully');
            console.log('Content:', rundownText);
            
          } catch (error) {
            console.error('Error generating daily rundown:', error.message);
            
            // Create fallback content
            const fallbackData = {
              date: new Date().toISOString().split('T')[0],
              timestamp: new Date().toISOString(),
              rundown: "Stay tuned for the latest Atlanta Braves updates! Check back soon for today's game analysis and team news.",
              lastGame: null,
              error: true
            };
            
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            fs.writeFileSync('data/daily-rundown.json', JSON.stringify(fallbackData, null, 2));
            
            // Don't fail the workflow, just log the error
            console.log('Fallback content created');
          }
        }
        
        generateDailyRundown();
        EOF
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/daily-rundown.json
        git diff --staged --quiet || git commit -m "Update daily rundown - $(date '+%Y-%m-%d')"
        git push