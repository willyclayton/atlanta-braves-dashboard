name: Daily Rundown

on:
  schedule:
    # Runs at 4:00 AM EST (9:00 AM UTC)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  generate-daily-rundown:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install axios
    
    - name: Generate Daily Rundown
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        node << 'EOF'
        const axios = require('axios');
        const fs = require('fs');
        
        async function generateDailyRundown() {
          try {
            console.log('Fetching recent Braves game data...');
            
            // Fetch recent Braves games from MLB API
            const mlbResponse = await axios.get(
              'https://statsapi.mlb.com/api/v1/schedule/games/?sportId=1&teamId=144&season=2025&gameType=R&hydrate=boxscore,decisions',
              { timeout: 10000 }
            );
            
            const games = mlbResponse.data.dates.flatMap(date => date.games);
            const recentGames = games
              .filter(game => game.status.statusCode === 'F') // Only completed games
              .sort((a, b) => new Date(b.gameDate) - new Date(a.gameDate))
              .slice(0, 1); // Get last game only
            
            if (recentGames.length === 0) {
              throw new Error('No recent completed games found');
            }
            
            const lastGame = recentGames[0];
            console.log('Fetching detailed boxscore for game:', lastGame.gamePk);
            
            // Get detailed boxscore data with specific hydration
            const boxscoreResponse = await axios.get(
              `https://statsapi.mlb.com/api/v1/game/${lastGame.gamePk}/boxscore`,
              { timeout: 15000 }
            );
            
            // Also get game summary for more accurate data
            const gameResponse = await axios.get(
              `https://statsapi.mlb.com/api/v1/game/${lastGame.gamePk}/linescore`,
              { timeout: 15000 }
            );
            
            const boxscore = boxscoreResponse.data;
            const gameData = gameResponse.data;
            
            // Determine Braves team and opponent from the boxscore
            const isAway = boxscore.teams.away.team.id === 144;
            const bravesTeam = isAway ? boxscore.teams.away : boxscore.teams.home;
            const opponentTeam = isAway ? boxscore.teams.home : boxscore.teams.away;
            
            // Get accurate game result
            const bravesRuns = bravesTeam.teamStats.batting.runs;
            const oppRuns = opponentTeam.teamStats.batting.runs;
            const gameResult = bravesRuns > oppRuns ? 'W' : 'L';
            const score = `${bravesRuns}-${oppRuns}`;
            const homeAway = isAway ? '@' : 'vs';
            
            // Get Braves starting pitcher stats
            let bravesStartingPitcher = null;
            Object.values(bravesTeam.players).forEach(player => {
              if (player.stats?.pitching && player.gameStatus?.isCurrentPitcher === false) {
                const pitchingStats = player.stats.pitching;
                // Starting pitcher typically has the most innings pitched
                if (pitchingStats.inningsPitched && parseFloat(pitchingStats.inningsPitched) >= 1) {
                  if (!bravesStartingPitcher || 
                      parseFloat(pitchingStats.inningsPitched) > parseFloat(bravesStartingPitcher.stats.pitching.inningsPitched)) {
                    bravesStartingPitcher = player;
                  }
                }
              }
            });
            
            // Find significant Braves offensive contributors
            const significantHitters = [];
            Object.values(bravesTeam.players).forEach(player => {
              if (player.stats?.batting) {
                const stats = player.stats.batting;
                const hits = stats.hits || 0;
                const homeRuns = stats.homeRuns || 0;
                const rbi = stats.rbi || 0;
                
                // Consider significant if: 2+ hits, 1+ HR, 2+ RBI, or multiple categories
                const isSignificant = hits >= 2 || homeRuns >= 1 || rbi >= 2 || 
                                    (hits >= 1 && rbi >= 1) || (hits >= 1 && homeRuns >= 1);
                
                if (isSignificant) {
                  significantHitters.push({
                    name: player.person.fullName,
                    hits: hits,
                    homeRuns: homeRuns,
                    rbi: rbi,
                    runs: stats.runs || 0
                  });
                }
              }
            });
            
            // Sort hitters by contribution (HR worth 3, RBI worth 2, hits worth 1)
            significantHitters.sort((a, b) => {
              const scoreA = (a.homeRuns * 3) + (a.rbi * 2) + a.hits;
              const scoreB = (b.homeRuns * 3) + (b.rbi * 2) + b.hits;
              return scoreB - scoreA;
            });
            
            // Build structured game data
            const gameContext = JSON.stringify({
              gameResult: {
                result: gameResult,
                score: score,
                homeAway: homeAway,
                opponent: opponentTeam.team.name,
                fullResult: `${score} ${gameResult} ${homeAway} ${opponentTeam.team.name}`
              },
              date: new Date(lastGame.gameDate).toLocaleDateString(),
              bravesStartingPitcher: bravesStartingPitcher ? {
                name: bravesStartingPitcher.person.fullName,
                inningsPitched: bravesStartingPitcher.stats.pitching.inningsPitched,
                earnedRuns: bravesStartingPitcher.stats.pitching.earnedRuns,
                hits: bravesStartingPitcher.stats.pitching.hits,
                homeRuns: bravesStartingPitcher.stats.pitching.homeRuns,
                strikeOuts: bravesStartingPitcher.stats.pitching.strikeOuts
              } : null,
              significantHitters: significantHitters.slice(0, 3), // Top 3 contributors
              teamStats: {
                bravesRuns: bravesRuns,
                bravesHits: bravesTeam.teamStats.batting.hits,
                opponentRuns: oppRuns,
                opponentHits: opponentTeam.teamStats.batting.hits
              }
            }, null, 2);
            
            console.log('Calling OpenAI API for concise summary...');
            
            // Call OpenAI API with GPT-4 for better accuracy
            const openaiResponse = await axios.post(
              'https://api.openai.com/v1/chat/completions',
              {
                model: 'gpt-4o-mini',
                messages: [
                  {
                    role: 'system',
                    content: 'You are a precise sports reporter. Write game summaries in this EXACT format using ONLY the provided data:\n\n1. Result line: "[score] [W/L] [vs/@] [opponent]" (e.g. "7-1 L @ Brewers")\n2. Pitcher highlight: "[Name]: [innings] innings, [earned runs] earned runs, [hits] hits, [HR] HR, [strikeouts] strikeouts"\n3. Batter highlights: "[Name]: [hits] hits, [HR] HR, [RBI] RBI" (only if significant contributors provided)\n4. Brief game summary: 1-2 sentences about key moments/plays. No fluff, no "Go Braves".\n\nUse exact numbers from the data. Do not add information not provided.'
                  },
                  {
                    role: 'user',
                    content: `Write a game summary in the specified format using only this verified data:\n\n${gameContext}`
                  }
                ],
                max_tokens: 120,
                temperature: 0.1
              },
              {
                headers: {
                  'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                  'Content-Type': 'application/json'
                },
                timeout: 30000
              }
            );
            
            const rundownText = openaiResponse.data.choices[0].message.content.trim();
            
            // Create data directory if it doesn't exist
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            // Save the daily rundown with structured data
            const dailyData = {
              date: new Date().toISOString().split('T')[0],
              timestamp: new Date().toISOString(),
              rundown: rundownText,
              lastGame: {
                date: lastGame.gameDate,
                opponent: opponentTeam.team.name,
                result: gameResult,
                score: score,
                homeAway: homeAway,
                startingPitcher: bravesStartingPitcher ? {
                  name: bravesStartingPitcher.person.fullName,
                  inningsPitched: bravesStartingPitcher.stats.pitching.inningsPitched,
                  earnedRuns: bravesStartingPitcher.stats.pitching.earnedRuns,
                  hits: bravesStartingPitcher.stats.pitching.hits,
                  homeRuns: bravesStartingPitcher.stats.pitching.homeRuns,
                  strikeOuts: bravesStartingPitcher.stats.pitching.strikeOuts
                } : null,
                significantHitters: significantHitters,
                teamStats: {
                  bravesRuns: bravesRuns,
                  bravesHits: bravesTeam.teamStats.batting.hits,
                  opponentRuns: oppRuns,
                  opponentHits: opponentTeam.teamStats.batting.hits
                }
              }
            };
            
            fs.writeFileSync('data/daily-rundown.json', JSON.stringify(dailyData, null, 2));
            
            console.log('Daily rundown generated successfully');
            console.log('Content:', rundownText);
            
          } catch (error) {
            console.error('Error generating daily rundown:', error.message);
            
            // Create fallback content
            const fallbackData = {
              date: new Date().toISOString().split('T')[0],
              timestamp: new Date().toISOString(),
              rundown: "Stay tuned for the latest Atlanta Braves updates! Check back soon for today's game analysis and team news.",
              lastGame: null,
              error: true
            };
            
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            fs.writeFileSync('data/daily-rundown.json', JSON.stringify(fallbackData, null, 2));
            
            // Don't fail the workflow, just log the error
            console.log('Fallback content created');
          }
        }
        
        generateDailyRundown();
        EOF
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/daily-rundown.json
        git diff --staged --quiet || git commit -m "Update daily rundown - $(date '+%Y-%m-%d')"
        git push