name: Daily Rundown

on:
  schedule:
    # Runs at 4:00 AM EST (9:00 AM UTC)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  generate-daily-rundown:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install axios
    
    - name: Generate Daily Rundown
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        node << 'EOF'
        const axios = require('axios');
        const fs = require('fs');
        
        async function generateDailyRundown() {
          try {
            console.log('Fetching recent Braves game data...');
            
            // Fetch recent Braves games from MLB API
            const mlbResponse = await axios.get(
              'https://statsapi.mlb.com/api/v1/schedule/games/?sportId=1&teamId=144&season=2025&gameType=R&hydrate=boxscore,decisions',
              { timeout: 10000 }
            );
            
            const games = mlbResponse.data.dates.flatMap(date => date.games);
            const recentGames = games
              .filter(game => game.status.statusCode === 'F') // Only completed games
              .sort((a, b) => new Date(b.gameDate) - new Date(a.gameDate))
              .slice(0, 1); // Get last game only
            
            if (recentGames.length === 0) {
              console.log('No recent completed games found - using mock data for testing');
              
              // Create mock data for off-season testing
              const mockRundownText = "Braves W 8-3 vs Phillies. Sale earned the win (7 IP, 2 ER), Iglesias recorded the save. Acuña Jr. led with 3 hits and 2 RBI. Braves out-hit Philadelphia 12-7 with 1 error.";
              
              const mockData = {
                date: new Date().toISOString().split('T')[0],
                timestamp: new Date().toISOString(),
                rundown: mockRundownText,
                lastGame: {
                  date: new Date().toISOString(),
                  opponent: "Philadelphia Phillies",
                  result: "W",
                  score: "8-3",
                  homeAway: "vs",
                  pitching: {
                    winner: "Chris Sale",
                    loser: "Zack Wheeler", 
                    save: "Raisel Iglesias"
                  },
                  hitting: {
                    bravesHits: 12,
                    bravesRuns: 8,
                    topHitter: {
                      name: "Ronald Acuña Jr.",
                      hits: 3,
                      rbi: 2
                    }
                  }
                },
                mockData: true
              };
              
              if (!fs.existsSync('data')) {
                fs.mkdirSync('data');
              }
              
              fs.writeFileSync('data/daily-rundown.json', JSON.stringify(mockData, null, 2));
              console.log('Mock daily rundown created for testing');
              return;
            }
            
            const lastGame = recentGames[0];
            console.log('Fetching detailed boxscore for game:', lastGame.gamePk);
            
            // Get detailed boxscore data
            const boxscoreResponse = await axios.get(
              `https://statsapi.mlb.com/api/v1/game/${lastGame.gamePk}/boxscore`,
              { timeout: 10000 }
            );
            
            const boxscore = boxscoreResponse.data;
            const bravesTeam = boxscore.teams.away.team.id === 144 ? boxscore.teams.away : boxscore.teams.home;
            const opponentTeam = boxscore.teams.away.team.id === 144 ? boxscore.teams.home : boxscore.teams.away;
            const gameResult = bravesTeam.teamStats.batting.runs > opponentTeam.teamStats.batting.runs ? 'W' : 'L';
            const score = `${bravesTeam.teamStats.batting.runs}-${opponentTeam.teamStats.batting.runs}`;
            const homeAway = boxscore.teams.away.team.id === 144 ? '@' : 'vs';
            
            // Get winning/losing pitcher info
            const winningPitcher = boxscore.teams.away.pitchers.find(p => 
              boxscore.teams.away.players[`ID${p}`]?.stats?.pitching?.decisions?.wins === 1
            ) || boxscore.teams.home.pitchers.find(p => 
              boxscore.teams.home.players[`ID${p}`]?.stats?.pitching?.decisions?.wins === 1
            );
            
            const losingPitcher = boxscore.teams.away.pitchers.find(p => 
              boxscore.teams.away.players[`ID${p}`]?.stats?.pitching?.decisions?.losses === 1
            ) || boxscore.teams.home.pitchers.find(p => 
              boxscore.teams.home.players[`ID${p}`]?.stats?.pitching?.decisions?.losses === 1
            );
            
            // Get save pitcher if exists
            const savePitcher = boxscore.teams.away.pitchers.find(p => 
              boxscore.teams.away.players[`ID${p}`]?.stats?.pitching?.decisions?.saves === 1
            ) || boxscore.teams.home.pitchers.find(p => 
              boxscore.teams.home.players[`ID${p}`]?.stats?.pitching?.decisions?.saves === 1
            );
            
            // Get top offensive performers for Braves
            let topHitter = null;
            let maxHits = 0;
            Object.values(bravesTeam.players).forEach(player => {
              if (player.stats?.batting?.hits > maxHits) {
                maxHits = player.stats.batting.hits;
                topHitter = player;
              }
            });
            
            // Build concise game summary
            const gameContext = `
            GAME RESULT: Atlanta Braves ${gameResult} ${score} ${homeAway} ${opponentTeam.team.name}
            DATE: ${new Date(lastGame.gameDate).toLocaleDateString()}
            
            PITCHING:
            ${winningPitcher ? `Win: ${boxscore.teams.away.players[`ID${winningPitcher}`]?.person?.fullName || boxscore.teams.home.players[`ID${winningPitcher}`]?.person?.fullName}` : ''}
            ${losingPitcher ? `Loss: ${boxscore.teams.away.players[`ID${losingPitcher}`]?.person?.fullName || boxscore.teams.home.players[`ID${losingPitcher}`]?.person?.fullName}` : ''}
            ${savePitcher ? `Save: ${boxscore.teams.away.players[`ID${savePitcher}`]?.person?.fullName || boxscore.teams.home.players[`ID${savePitcher}`]?.person?.fullName}` : ''}
            
            BRAVES HITTING:
            Team Total: ${bravesTeam.teamStats.batting.hits} hits, ${bravesTeam.teamStats.batting.runs} runs
            ${topHitter ? `Top Hitter: ${topHitter.person.fullName} (${topHitter.stats.batting.hits} hits, ${topHitter.stats.batting.rbi} RBI)` : ''}
            
            TEAM STATS:
            Braves: ${bravesTeam.teamStats.batting.hits}H-${bravesTeam.teamStats.fielding.errors}E
            ${opponentTeam.team.name}: ${opponentTeam.teamStats.batting.hits}H-${opponentTeam.teamStats.fielding.errors}E
            `;
            
            console.log('Calling OpenAI API for concise summary...');
            
            // Call OpenAI API with strict instructions for conciseness
            const openaiResponse = await axios.post(
              'https://api.openai.com/v1/chat/completions',
              {
                model: 'gpt-3.5-turbo',
                messages: [
                  {
                    role: 'system',
                    content: 'You are a concise sports reporter. Write EXTREMELY brief game summaries for fans who missed the game. Focus ONLY on: final score, key pitching performances, top batting performances, and any notable plays. NO fluff, NO filler. Maximum 3-4 sentences. Be direct and factual.'
                  },
                  {
                    role: 'user',
                    content: `Write a concise daily rundown for someone who missed this Braves game. Include only essential facts:\n\n${gameContext}`
                  }
                ],
                max_tokens: 100,
                temperature: 0.3
              },
              {
                headers: {
                  'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                  'Content-Type': 'application/json'
                },
                timeout: 30000
              }
            );
            
            const rundownText = openaiResponse.data.choices[0].message.content.trim();
            
            // Create data directory if it doesn't exist
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            // Save the daily rundown
            const dailyData = {
              date: new Date().toISOString().split('T')[0],
              timestamp: new Date().toISOString(),
              rundown: rundownText,
              lastGame: {
                date: lastGame.gameDate,
                opponent: opponentTeam.team.name,
                result: gameResult,
                score: score,
                homeAway: homeAway,
                pitching: {
                  winner: winningPitcher ? (boxscore.teams.away.players[`ID${winningPitcher}`]?.person?.fullName || boxscore.teams.home.players[`ID${winningPitcher}`]?.person?.fullName) : null,
                  loser: losingPitcher ? (boxscore.teams.away.players[`ID${losingPitcher}`]?.person?.fullName || boxscore.teams.home.players[`ID${losingPitcher}`]?.person?.fullName) : null,
                  save: savePitcher ? (boxscore.teams.away.players[`ID${savePitcher}`]?.person?.fullName || boxscore.teams.home.players[`ID${savePitcher}`]?.person?.fullName) : null
                },
                hitting: {
                  bravesHits: bravesTeam.teamStats.batting.hits,
                  bravesRuns: bravesTeam.teamStats.batting.runs,
                  topHitter: topHitter ? {
                    name: topHitter.person.fullName,
                    hits: topHitter.stats.batting.hits,
                    rbi: topHitter.stats.batting.rbi
                  } : null
                }
              }
            };
            
            fs.writeFileSync('data/daily-rundown.json', JSON.stringify(dailyData, null, 2));
            
            console.log('Daily rundown generated successfully');
            console.log('Content:', rundownText);
            
          } catch (error) {
            console.error('Error generating daily rundown:', error.message);
            
            // Create fallback content
            const fallbackData = {
              date: new Date().toISOString().split('T')[0],
              timestamp: new Date().toISOString(),
              rundown: "Stay tuned for the latest Atlanta Braves updates! Check back soon for today's game analysis and team news.",
              lastGame: null,
              error: true
            };
            
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            fs.writeFileSync('data/daily-rundown.json', JSON.stringify(fallbackData, null, 2));
            
            // Don't fail the workflow, just log the error
            console.log('Fallback content created');
          }
        }
        
        generateDailyRundown();
        EOF
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/daily-rundown.json
        git diff --staged --quiet || git commit -m "Update daily rundown - $(date '+%Y-%m-%d')"
        git push