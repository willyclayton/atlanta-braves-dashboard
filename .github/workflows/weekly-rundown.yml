name: Weekly Rundown

on:
  schedule:
    # Runs daily at 4:00 AM EST (9:00 AM UTC)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  generate-weekly-rundown:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install axios
    
    - name: Generate Weekly Rundown
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        node << 'EOF'
        const axios = require('axios');
        const fs = require('fs');
        
        async function generateWeeklyRundown() {
          try {
            console.log('Fetching recent Braves games to ensure complete series...');
            
            // Get current date and calculate date range with buffer for complete series
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - 10); // Start with 10 days to capture full series
            
            const formatDate = (date) => date.toISOString().split('T')[0];
            
            // Fetch recent Braves games from MLB API with expanded range
            const mlbResponse = await axios.get(
              `https://statsapi.mlb.com/api/v1/schedule/games/?sportId=1&teamId=144&season=2025&gameType=R&startDate=${formatDate(startDate)}&endDate=${formatDate(endDate)}&hydrate=boxscore,decisions`,
              { timeout: 15000 }
            );
            
            const allGames = mlbResponse.data.dates.flatMap(date => date.games);
            const allCompletedGames = allGames
              .filter(game => game.status.statusCode === 'F') // Only completed games
              .sort((a, b) => new Date(a.gameDate) - new Date(b.gameDate)); // Sort chronologically
            
            if (allCompletedGames.length === 0) {
              throw new Error('No completed games found in the expanded date range');
            }
            
            // Identify series and ensure we have complete series from the last week
            const seriesMap = new Map();
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            // Group games by opponent and home/away status to identify series
            allCompletedGames.forEach(game => {
              const gameDate = new Date(game.gameDate);
              const isAway = game.teams.away.team.id === 144;
              const opponentId = isAway ? game.teams.home.team.id : game.teams.away.team.id;
              const opponentName = isAway ? game.teams.home.team.name : game.teams.away.team.name;
              const homeAway = isAway ? 'away' : 'home';
              const seriesKey = `${opponentId}_${homeAway}`;
              
              if (!seriesMap.has(seriesKey)) {
                seriesMap.set(seriesKey, {
                  opponent: opponentName,
                  homeAway,
                  games: []
                });
              }
              
              seriesMap.get(seriesKey).games.push({
                ...game,
                gameDate: gameDate
              });
            });
            
            // Find series that have games within the last week and ensure we include complete series
            const relevantGames = [];
            seriesMap.forEach((series, key) => {
              const hasRecentGame = series.games.some(game => game.gameDate >= oneWeekAgo);
              if (hasRecentGame) {
                // Include all games from this series to ensure completeness
                relevantGames.push(...series.games);
                console.log(`Including complete series: ${series.homeAway} ${series.opponent} (${series.games.length} games)`);
              }
            });
            
            // Remove duplicates and sort by date
            const completedGames = [...new Set(relevantGames)]
              .sort((a, b) => new Date(a.gameDate) - new Date(b.gameDate));
              
            console.log(`Found ${completedGames.length} completed games in complete series from the last week`);
            
            if (completedGames.length === 0) {
              throw new Error('No completed series found in the last week');
            }
            
            console.log(`Found ${completedGames.length} completed games in the last week`);
            
            // Analyze each game to build weekly stats
            let wins = 0;
            let losses = 0;
            const pitchers = new Map();
            const batters = new Map();
            const gameResults = [];
            const seriesTracker = new Map(); // Track series records
            
            for (const game of completedGames) {
              try {
                // Get detailed boxscore data
                const boxscoreResponse = await axios.get(
                  `https://statsapi.mlb.com/api/v1/game/${game.gamePk}/boxscore`,
                  { timeout: 15000 }
                );
                
                const boxscore = boxscoreResponse.data;
                const isAway = boxscore.teams.away.team.id === 144;
                const bravesTeam = isAway ? boxscore.teams.away : boxscore.teams.home;
                const opponentTeam = isAway ? boxscore.teams.home : boxscore.teams.away;
                
                const bravesRuns = bravesTeam.teamStats.batting.runs;
                const oppRuns = opponentTeam.teamStats.batting.runs;
                const gameResult = bravesRuns > oppRuns ? 'W' : 'L';
                
                if (gameResult === 'W') wins++;
                else losses++;
                
                const opponentName = opponentTeam.team.name;
                const homeAway = isAway ? '@' : 'vs';
                
                // Track series results for each opponent
                const seriesKey = `${opponentName}_${isAway ? 'away' : 'home'}`;
                if (!seriesTracker.has(seriesKey)) {
                  seriesTracker.set(seriesKey, {
                    opponent: opponentName,
                    homeAway,
                    wins: 0,
                    losses: 0,
                    games: []
                  });
                }
                
                const series = seriesTracker.get(seriesKey);
                if (gameResult === 'W') {
                  series.wins++;
                } else {
                  series.losses++;
                }
                series.games.push({
                  date: new Date(game.gameDate).toLocaleDateString(),
                  result: gameResult,
                  score: `${bravesRuns}-${oppRuns}`
                });
                
                gameResults.push({
                  date: new Date(game.gameDate).toLocaleDateString(),
                  result: gameResult,
                  score: `${bravesRuns}-${oppRuns}`,
                  opponent: opponentName,
                  homeAway: homeAway
                });
                
                // Aggregate pitcher stats
                Object.values(bravesTeam.players).forEach(player => {
                  if (player.stats?.pitching) {
                    const name = player.person.fullName;
                    const stats = player.stats.pitching;
                    
                    if (!pitchers.has(name)) {
                      pitchers.set(name, {
                        appearances: 0,
                        inningsPitched: 0,
                        earnedRuns: 0,
                        strikeouts: 0,
                        hits: 0,
                        wins: 0,
                        losses: 0,
                        saves: 0
                      });
                    }
                    
                    const pitcher = pitchers.get(name);
                    pitcher.appearances += 1;
                    pitcher.inningsPitched += parseFloat(stats.inningsPitched || 0);
                    pitcher.earnedRuns += parseInt(stats.earnedRuns || 0);
                    pitcher.strikeouts += parseInt(stats.strikeOuts || 0);
                    pitcher.hits += parseInt(stats.hits || 0);
                    pitcher.wins += parseInt(stats.wins || 0);
                    pitcher.losses += parseInt(stats.losses || 0);
                    pitcher.saves += parseInt(stats.saves || 0);
                  }
                });
                
                // Aggregate batter stats
                Object.values(bravesTeam.players).forEach(player => {
                  if (player.stats?.batting) {
                    const name = player.person.fullName;
                    const stats = player.stats.batting;
                    
                    if (!batters.has(name)) {
                      batters.set(name, {
                        games: 0,
                        hits: 0,
                        homeRuns: 0,
                        rbi: 0,
                        runs: 0,
                        atBats: 0
                      });
                    }
                    
                    const batter = batters.get(name);
                    if (parseInt(stats.atBats || 0) > 0) {
                      batter.games += 1;
                    }
                    batter.hits += parseInt(stats.hits || 0);
                    batter.homeRuns += parseInt(stats.homeRuns || 0);
                    batter.rbi += parseInt(stats.rbi || 0);
                    batter.runs += parseInt(stats.runs || 0);
                    batter.atBats += parseInt(stats.atBats || 0);
                  }
                });
                
                console.log(`Processed game: ${gameResult} ${bravesRuns}-${oppRuns} ${isAway ? '@' : 'vs'} ${opponentTeam.team.name}`);
              } catch (gameError) {
                console.error(`Error processing game ${game.gamePk}:`, gameError.message);
              }
            }
            
            // Find top performers and highlights
            const topPitchers = Array.from(pitchers.entries())
              .filter(([name, stats]) => stats.inningsPitched >= 2) // Minimum 2 innings
              .sort((a, b) => {
                // Sort by ERA (lower is better), then by strikeouts
                const eraA = a[1].earnedRuns / (a[1].inningsPitched / 9);
                const eraB = b[1].earnedRuns / (b[1].inningsPitched / 9);
                if (Math.abs(eraA - eraB) < 0.5) {
                  return b[1].strikeouts - a[1].strikeouts;
                }
                return eraA - eraB;
              })
              .slice(0, 3)
              .map(([name, stats]) => ({
                name,
                ...stats,
                era: (stats.earnedRuns / (stats.inningsPitched / 9)).toFixed(2)
              }));
            
            const topBatters = Array.from(batters.entries())
              .filter(([name, stats]) => stats.atBats >= 5) // Minimum 5 at-bats
              .sort((a, b) => {
                // Sort by production value: (hits + (2 * HR) + RBI)
                const valueA = a[1].hits + (a[1].homeRuns * 2) + a[1].rbi;
                const valueB = b[1].hits + (b[1].homeRuns * 2) + b[1].rbi;
                return valueB - valueA;
              })
              .slice(0, 4)
              .map(([name, stats]) => ({
                name,
                ...stats,
                avg: (stats.hits / stats.atBats).toFixed(3)
              }));
            
            // Capture notable highlights from the week
            const highlights = [];
            
            // High-scoring games (8+ runs)
            gameResults.forEach(game => {
              const totalRuns = parseInt(game.score.split('-')[0]) + parseInt(game.score.split('-')[1]);
              if (totalRuns >= 10) {
                highlights.push(`High-scoring ${game.result} ${game.score} ${game.homeAway} ${game.opponent}`);
              }
            });
            
            // Shutout wins
            gameResults.forEach(game => {
              if (game.result === 'W' && game.score.endsWith('-0')) {
                highlights.push(`Shutout victory ${game.score} ${game.homeAway} ${game.opponent}`);
              }
            });
            
            // Close games (1-run margin)
            gameResults.forEach(game => {
              const runs = game.score.split('-').map(r => parseInt(r));
              if (Math.abs(runs[0] - runs[1]) === 1) {
                highlights.push(`Close ${game.result} ${game.score} ${game.homeAway} ${game.opponent}`);
              }
            });
            
            // Outstanding individual performances
            topBatters.forEach(batter => {
              if (batter.homeRuns >= 3) {
                highlights.push(`${batter.name}: ${batter.homeRuns} HRs in the week`);
              }
              if (parseFloat(batter.avg) >= 0.400 && batter.hits >= 6) {
                highlights.push(`${batter.name}: ${batter.avg} avg, ${batter.hits} hits`);
              }
            });
            
            topPitchers.forEach(pitcher => {
              if (parseFloat(pitcher.era) <= 1.50 && pitcher.inningsPitched >= 5) {
                highlights.push(`${pitcher.name}: ${pitcher.era} ERA, ${pitcher.strikeouts} strikeouts`);
              }
              if (pitcher.strikeouts >= 15) {
                highlights.push(`${pitcher.name}: ${pitcher.strikeouts} strikeouts`);
              }
            });
            
            // Analyze series results
            const seriesResults = Array.from(seriesTracker.values()).map(series => {
              const totalGames = series.wins + series.losses;
              let seriesOutcome = '';
              
              if (totalGames >= 2) {
                if (series.wins > series.losses) {
                  seriesOutcome = totalGames >= 3 ? 'won series' : 'winning series';
                } else if (series.losses > series.wins) {
                  seriesOutcome = totalGames >= 3 ? 'lost series' : 'losing series';
                } else {
                  seriesOutcome = 'split series';
                }
              } else {
                seriesOutcome = series.wins > series.losses ? 'won game' : 'lost game';
              }
              
              return {
                opponent: series.opponent,
                homeAway: series.homeAway,
                record: `${series.wins}-${series.losses}`,
                outcome: seriesOutcome,
                games: series.games
              };
            });
            
            // Calculate momentum indicators
            const recentGames = gameResults.slice(-3); // Last 3 games
            const recentWins = recentGames.filter(g => g.result === 'W').length;
            let momentumDescription = '';
            
            if (recentWins === 3) {
              momentumDescription = 'hot streak with 3 straight wins';
            } else if (recentWins === 0) {
              momentumDescription = 'struggling with 3 straight losses';
            } else if (recentWins === 2) {
              momentumDescription = 'building momentum with recent solid play';
            } else {
              momentumDescription = wins > losses ? 'positive overall week' : 'challenging week overall';
            }
            
            // Build structured weekly data
            const actualStartDate = new Date(Math.min(...completedGames.map(g => new Date(g.gameDate))));
            const actualEndDate = new Date(Math.max(...completedGames.map(g => new Date(g.gameDate))));
            
            const weeklyContext = JSON.stringify({
              weeklyRecord: {
                wins,
                losses,
                record: `${wins}-${losses}`,
                winPct: (wins / (wins + losses)).toFixed(3)
              },
              dateRange: `${formatDate(actualStartDate)} to ${formatDate(actualEndDate)}`,
              momentum: momentumDescription,
              topPitchers,
              topBatters,
              gameResults,
              seriesResults,
              highlights: highlights.slice(0, 6), // Include top 6 highlights
              totalGames: completedGames.length
            }, null, 2);
            
            console.log('Calling OpenAI API for weekly summary...');
            
            // Call OpenAI API
            const openaiResponse = await axios.post(
              'https://api.openai.com/v1/chat/completions',
              {
                model: 'gpt-4o-mini',
                messages: [
                  {
                    role: 'system',
                    content: 'You are a sports reporter writing a comprehensive weekly catch-up for someone who missed all the games. Write in this EXACT format using ONLY the provided data:\n\nRecord: [wins]-[losses] ([winPct])\nSeries: [Brief series results with outcomes]\nHighlights: [2-3 key highlights from the week]\nTrend: [Brief momentum description]\n\nUse conversational language like "Braves won the series", "dominated", "struggled", "offensive explosion", "pitching clinic". Include notable individual performances and game highlights when available. Keep each section concise but informative. Focus on what made this week memorable.'
                  },
                  {
                    role: 'user',
                    content: `Write a weekly catch-up summary as if I missed all the games this week. Use only this verified data:\n\n${weeklyContext}`
                  }
                ],
                max_tokens: 150,
                temperature: 0.1
              },
              {
                headers: {
                  'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                  'Content-Type': 'application/json'
                },
                timeout: 30000
              }
            );
            
            const rundownText = openaiResponse.data.choices[0].message.content.trim();
            
            // Create data directory if it doesn't exist
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            // Save the weekly rundown
            const weeklyData = {
              date: new Date().toISOString().split('T')[0],
              timestamp: new Date().toISOString(),
              rundown: rundownText,
              weeklyStats: {
                dateRange: `${formatDate(actualStartDate)} to ${formatDate(actualEndDate)}`,
                record: `${wins}-${losses}`,
                wins,
                losses,
                winPct: (wins / (wins + losses)).toFixed(3),
                totalGames: completedGames.length,
                momentum: momentumDescription,
                topPitchers,
                topBatters,
                gameResults,
                seriesResults,
                highlights: highlights.slice(0, 6)
              }
            };
            
            fs.writeFileSync('data/weekly-rundown.json', JSON.stringify(weeklyData, null, 2));
            console.log('Weekly rundown saved successfully');
            
          } catch (error) {
            console.error('Error generating weekly rundown:', error);
            
            // Create fallback data file
            const fallbackData = {
              date: new Date().toISOString().split('T')[0],
              timestamp: new Date().toISOString(),
              rundown: 'Weekly rundown temporarily unavailable during off-season. Check back during the regular season for comprehensive weekly analysis!',
              weeklyStats: {
                dateRange: 'N/A',
                record: 'N/A',
                totalGames: 0
              }
            };
            
            if (!fs.existsSync('data')) {
              fs.mkdirSync('data');
            }
            
            fs.writeFileSync('data/weekly-rundown.json', JSON.stringify(fallbackData, null, 2));
            console.log('Fallback weekly rundown created');
          }
        }
        
        generateWeeklyRundown();
        EOF
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "Update weekly rundown data" || exit 0
        git pull --rebase origin main || true
        git push 